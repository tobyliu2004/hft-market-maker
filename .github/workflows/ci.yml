name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        compiler: [gcc, clang]
        exclude:
          - os: macos-latest
            compiler: gcc

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          libboost-all-dev \
          libssl-dev \
          nlohmann-json3-dev \
          libwebsocketpp-dev \
          libquickfix-dev \
          python3-dev \
          python3-pip \
          clang-format \
          cppcheck \
          valgrind

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install \
          cmake \
          boost \
          openssl \
          nlohmann-json \
          websocketpp \
          quickfix \
          python@3.10 \
          clang-format \
          cppcheck

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements.txt

    - name: Configure CMake
      run: |
        mkdir build
        cd build
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          export CC=clang
          export CXX=clang++
        else
          export CC=gcc
          export CXX=g++
        fi
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Build
      run: |
        cd build
        make -j$(nproc || sysctl -n hw.ncpu)

    - name: Run tests
      run: |
        cd build
        ctest -V --output-on-failure

    - name: Run static analysis
      if: matrix.build_type == 'Debug'
      run: |
        cppcheck --enable=all --error-exitcode=1 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          -I include/ \
          src/

    - name: Check code formatting
      if: matrix.build_type == 'Debug'
      run: |
        find src include tests -name "*.cpp" -o -name "*.h" | \
          xargs clang-format --dry-run --Werror

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: build/Testing/

  coverage:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          libboost-all-dev \
          libssl-dev \
          nlohmann-json3-dev \
          libwebsocketpp-dev \
          libquickfix-dev \
          python3-dev \
          python3-pip \
          lcov

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python/requirements.txt

    - name: Configure with coverage
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug \
              -DCMAKE_CXX_FLAGS="--coverage" \
              -DCMAKE_EXE_LINKER_FLAGS="--coverage" ..

    - name: Build and run tests
      run: |
        cd build
        make -j$(nproc)
        ctest -V

    - name: Generate coverage report
      run: |
        cd build
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./build/coverage.info
        flags: unittests
        name: codecov-umbrella

  memory-check:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cmake \
          libboost-all-dev \
          libssl-dev \
          nlohmann-json3-dev \
          libwebsocketpp-dev \
          libquickfix-dev \
          python3-dev \
          valgrind

    - name: Configure and build
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Debug ..
        make -j$(nproc)

    - name: Run valgrind checks
      run: |
        cd build
        valgrind --leak-check=full --error-exitcode=1 ./test_order_book
        valgrind --leak-check=full --error-exitcode=1 ./test_strategies
        valgrind --leak-check=full --error-exitcode=1 ./test_risk