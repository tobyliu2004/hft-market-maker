cmake_minimum_required(VERSION 3.16)
project(HFTMarketMaker VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Options
option(BUILD_TESTS "Build unit tests" ON)
option(BUILD_BENCHMARKS "Build performance benchmarks" OFF)
option(ENABLE_PROFILING "Enable profiling support" OFF)
option(USE_SANITIZERS "Enable address and undefined behavior sanitizers" OFF)

# Compiler flags
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -Werror=return-type")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -march=native")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG")
endif()

# Sanitizers
if(USE_SANITIZERS)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address,undefined -fno-omit-frame-pointer")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address,undefined")
endif()

# Profiling
if(ENABLE_PROFILING)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
endif()

# Enable position independent code
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

# Find packages
find_package(Threads REQUIRED)
find_package(Boost 1.70 REQUIRED COMPONENTS system date_time thread filesystem program_options)
find_package(Python3 COMPONENTS Interpreter Development NumPy REQUIRED)

# Find QuickFIX
find_path(QUICKFIX_INCLUDE_DIR quickfix/Application.h
    HINTS /usr/local/include /usr/include
)
find_library(QUICKFIX_LIBRARY quickfix
    HINTS /usr/local/lib /usr/lib
)

if(NOT QUICKFIX_INCLUDE_DIR OR NOT QUICKFIX_LIBRARY)
    message(FATAL_ERROR "QuickFIX not found. Please install QuickFIX library.")
endif()

# Find WebSocket++
find_path(WEBSOCKETPP_INCLUDE_DIR websocketpp/config/asio_client.hpp
    HINTS /usr/local/include /usr/include
)

if(NOT WEBSOCKETPP_INCLUDE_DIR)
    message(FATAL_ERROR "WebSocket++ not found. Please install WebSocket++ headers.")
endif()

# Find nlohmann/json - fetch if not found
find_package(nlohmann_json 3.2.0 QUIET)
if(NOT nlohmann_json_FOUND)
    include(FetchContent)
    FetchContent_Declare(
        json
        GIT_REPOSITORY https://github.com/nlohmann/json.git
        GIT_TAG v3.11.2
    )
    FetchContent_MakeAvailable(json)
endif()

# Find OpenSSL for WebSocket TLS
find_package(OpenSSL REQUIRED)

# Include directories
include_directories(
    ${CMAKE_SOURCE_DIR}/include
    ${Boost_INCLUDE_DIRS}
    ${QUICKFIX_INCLUDE_DIR}
    ${WEBSOCKETPP_INCLUDE_DIR}
    ${Python3_INCLUDE_DIRS}
    ${Python3_NumPy_INCLUDE_DIRS}
)

# Utilities library
add_library(hft_utils STATIC
    src/utils/logger.cpp
    src/utils/config_validator.cpp
    src/utils/performance_monitor.cpp
)

target_link_libraries(hft_utils
    ${CMAKE_THREAD_LIBS_INIT}
    nlohmann_json::nlohmann_json
)

# Core library
add_library(hft_core STATIC
    src/core/order_book.cpp
    src/core/fix_handler.cpp
)

target_link_libraries(hft_core
    hft_utils
    ${CMAKE_THREAD_LIBS_INIT}
    ${Boost_LIBRARIES}
    ${QUICKFIX_LIBRARY}
)

# Strategies library
add_library(hft_strategies STATIC
    src/strategies/avellaneda_stoikov.cpp
)

target_link_libraries(hft_strategies
    hft_core
)

# Models library (with Python integration)
add_library(hft_models STATIC
    src/models/python_bridge.cpp
)

target_link_libraries(hft_models
    hft_core
    ${Python3_LIBRARIES}
)

# Set Python paths for models library
target_compile_definitions(hft_models PRIVATE
    PYTHON_MODULE_PATH="${CMAKE_SOURCE_DIR}/python/models"
)

# Data feed library
add_library(hft_data STATIC
    src/data/polygon_websocket_feed.cpp
)

target_link_libraries(hft_data
    hft_core
    ${Boost_LIBRARIES}
    OpenSSL::SSL
    OpenSSL::Crypto
    nlohmann_json::nlohmann_json
)

# Risk management library
add_library(hft_risk STATIC
    src/risk/risk_manager.cpp
)

target_link_libraries(hft_risk
    hft_core
    hft_strategies
)

# Main market maker executable
add_executable(market_maker
    src/main.cpp
)

target_link_libraries(market_maker
    hft_core
    hft_strategies
    hft_models
    hft_data
    hft_risk
    hft_utils
    ${CMAKE_THREAD_LIBS_INIT}
    ${Boost_PROGRAM_OPTIONS_LIBRARIES}
)

# Backtesting executable
add_executable(backtest
    src/backtest.cpp
)

target_link_libraries(backtest
    hft_core
    hft_strategies
    hft_models
    hft_data
    hft_risk
    hft_utils
    ${Boost_PROGRAM_OPTIONS_LIBRARIES}
)

# Tests
if(BUILD_TESTS)
    enable_testing()
    
    # Fetch Google Test if not found
    find_package(GTest QUIET)
    if(NOT GTest_FOUND)
        include(FetchContent)
        FetchContent_Declare(
            googletest
            GIT_REPOSITORY https://github.com/google/googletest.git
            GIT_TAG v1.14.0
        )
        FetchContent_MakeAvailable(googletest)
    endif()
    
    # Order book tests
    add_executable(test_order_book
        tests/test_order_book.cpp
    )
    
    target_link_libraries(test_order_book
        hft_core
        GTest::gtest
        GTest::gtest_main
    )
    
    add_test(NAME test_order_book COMMAND test_order_book)
    
    # Strategy tests
    add_executable(test_strategies
        tests/test_strategies.cpp
    )
    
    target_link_libraries(test_strategies
        hft_strategies
        hft_core
        GTest::gtest
        GTest::gtest_main
    )
    
    add_test(NAME test_strategies COMMAND test_strategies)
    
    # Risk management tests
    add_executable(test_risk
        tests/test_risk.cpp
    )
    
    target_link_libraries(test_risk
        hft_risk
        hft_core
        GTest::gtest
        GTest::gtest_main
    )
    
    add_test(NAME test_risk COMMAND test_risk)
    
    # Config validation tests
    add_executable(test_config_validator
        tests/test_config_validator.cpp
    )
    
    target_link_libraries(test_config_validator
        hft_utils
        GTest::gtest
        GTest::gtest_main
    )
    
    add_test(NAME test_config_validator COMMAND test_config_validator)
endif()

# Benchmarks
if(BUILD_BENCHMARKS)
    # Fetch Google Benchmark
    include(FetchContent)
    FetchContent_Declare(
        benchmark
        GIT_REPOSITORY https://github.com/google/benchmark.git
        GIT_TAG v1.8.3
    )
    FetchContent_MakeAvailable(benchmark)
    
    add_executable(benchmark_order_book
        benchmarks/benchmark_order_book.cpp
    )
    
    target_link_libraries(benchmark_order_book
        hft_core
        benchmark::benchmark
    )
    
    add_executable(benchmark_strategies
        benchmarks/benchmark_strategies.cpp
    )
    
    target_link_libraries(benchmark_strategies
        hft_strategies
        hft_core
        benchmark::benchmark
    )
endif()

# Installation rules
install(TARGETS market_maker backtest
    RUNTIME DESTINATION bin
)

install(TARGETS hft_core hft_strategies hft_models hft_data hft_risk hft_utils
    ARCHIVE DESTINATION lib
)

install(DIRECTORY include/
    DESTINATION include
)

install(DIRECTORY python/
    DESTINATION share/hft_market_maker/python
)

install(DIRECTORY config/
    DESTINATION etc/hft_market_maker
)

install(DIRECTORY scripts/
    DESTINATION share/hft_market_maker/scripts
    FILE_PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_READ GROUP_EXECUTE
)

# Package configuration
include(CMakePackageConfigHelpers)

write_basic_package_version_file(
    "${CMAKE_CURRENT_BINARY_DIR}/HFTMarketMakerConfigVersion.cmake"
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

# Print configuration summary
message(STATUS "=== HFT Market Maker Configuration ===")
message(STATUS "Version: ${PROJECT_VERSION}")
message(STATUS "C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Build Tests: ${BUILD_TESTS}")
message(STATUS "Build Benchmarks: ${BUILD_BENCHMARKS}")
message(STATUS "Enable Profiling: ${ENABLE_PROFILING}")
message(STATUS "Use Sanitizers: ${USE_SANITIZERS}")
message(STATUS "QuickFIX: ${QUICKFIX_INCLUDE_DIR}")
message(STATUS "WebSocket++: ${WEBSOCKETPP_INCLUDE_DIR}")
message(STATUS "Python: ${Python3_VERSION}")
message(STATUS "Boost: ${Boost_VERSION}")
message(STATUS "======================================")

# CPack configuration for packaging
set(CPACK_PACKAGE_NAME "HFTMarketMaker")
set(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "High-Frequency Market Making System")
set(CPACK_PACKAGE_VENDOR "HFT Systems")
set(CPACK_PACKAGE_CONTACT "support@hftsystems.com")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")
set(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")

# Generator-specific settings
set(CPACK_GENERATOR "TGZ;DEB;RPM")

# Debian package specific
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libboost-all-dev (>= 1.70), python3 (>= 3.8), python3-numpy")
set(CPACK_DEBIAN_PACKAGE_SECTION "finance")
set(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")

# RPM package specific
set(CPACK_RPM_PACKAGE_LICENSE "MIT")
set(CPACK_RPM_PACKAGE_GROUP "Applications/Finance")
set(CPACK_RPM_PACKAGE_REQUIRES "boost >= 1.70, python3 >= 3.8")

include(CPack)